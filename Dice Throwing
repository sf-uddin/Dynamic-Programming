// O(d * s * t) time Complexity---- O(d * t) space Complexity- where d is the number of dice, s is
    // the number of sides, and t is the target.
    public int DiceThrows(int numDice, int numSides, int target)
    {
        int[,] storedResults = new int[2, target + 1];
        storedResults[0, 0] = 1;

        int previousNumDiceIndex = 0;
        int newNumDiceIndex = 1;

        for (int currentNumDice = 0; currentNumDice < numDice; currentNumDice++)
        {
            for (int currentTarget = 0; currentTarget <= target; currentTarget++)
            {
                int numWaysToReachTarget = 0;

                for (int currentNumSides = 1; currentNumSides <= Math.Min(currentTarget, numSides); currentNumSides++)
                {
                    numWaysToReachTarget += storedResults[previousNumDiceIndex, currentTarget - currentNumSides];
                }

                storedResults[newNumDiceIndex, currentTarget] = numWaysToReachTarget;
            }

            int tempPreviousNumDiceIndex = previousNumDiceIndex;
            previousNumDiceIndex = newNumDiceIndex;
            newNumDiceIndex = tempPreviousNumDiceIndex;
        }

        return storedResults[previousNumDiceIndex, target];
    }
